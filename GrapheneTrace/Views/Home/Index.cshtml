<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Graphene Trace: Sensor Data Viewer</title>
    <!-- Load Tailwind CSS for modern styling -->
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        /* Custom styles for the heatmap table to ensure zero spacing */
        .heatmap-table {
            border-collapse: collapse;
            table-layout: fixed;
            width: 320px; /* 32 cells * 10px each = 320px */
            height: 320px;
        }
        .heatmap-table td {
            border: none;
            padding: 0;
            margin: 0;
            width: 10px;
            height: 10px;
            /* Prevents flickering during updates */
            transition: background-color 0.1s ease-out;
        }
    </style>
    <!-- Load Firebase/Firestore Imports -->
    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { getFirestore, collection, query, where, getDocs, doc, getDoc, setDoc } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";
        import { setLogLevel } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";
        
        // Expose Firebase functions globally for the main script
        window.firebase = {
            initializeApp,
            getAuth,
            signInAnonymously,
            signInWithCustomToken,
            onAuthStateChanged,
            getFirestore,
            collection,
            query,
            where,
            getDocs,
            doc,
            getDoc,
            setDoc,
            setLogLevel
        };
    </script>
</head>
<body class="bg-gray-50 text-gray-800 font-sans min-h-screen flex items-center justify-center">

    <!-- Main Application Container -->
    <div id="app-container" class="w-full h-full">
        <!-- Views will be dynamically inserted here -->
    </div>
    
    <!-- NOTE: We use jQuery here to mirror the user's provided code structure -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script>
        // --- GLOBAL APP STATE & FIREBASE SETUP ---
        let currentView = 'login'; // 'login', 'dashboard', or 'clinician'
        let currentUser = null;
        let userRole = null; // 'patient', 'clinician', 'admin'
        let db = null;
        let auth = null;
        const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
        const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : null;
        const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;

        // --- SIMULATED CSV DATA (32x32 frames) ---
        const MATRIX_SIZE = 32;

        // Frames loaded from a simulated data.csv, each element is a 32x32 matrix (array of 32 rows, each 32 cols)
        const SENSOR_DATA_FRAMES = [
            // Frame 0: Low/Moderate Pressure Spread
            // Represents an even, moderate weight distribution (e.g., sitting properly)
            Array(MATRIX_SIZE).fill(0).map((_, r) => 
                Array(MATRIX_SIZE).fill(0).map((_, c) => {
                    const base = 50 + Math.floor(Math.random() * 20); // Base pressure 50-70
                    const centerDist = Math.abs(r - 16) + Math.abs(c - 16);
                    return Math.min(120, base + Math.max(0, 15 - centerDist)); // Slight central increase
                })
            ),
            // Frame 1: High Pressure Peak (Risk Area)
            // Represents a dangerous hot spot (e.g., leaning heavily on one side)
            Array(MATRIX_SIZE).fill(0).map((_, r) => 
                Array(MATRIX_SIZE).fill(0).map((_, c) => {
                    const x = r - 20; // x-coord of peak
                    const y = c - 10; // y-coord of peak
                    const pressure = 255 - Math.round((x * x + y * y) * 2.5);
                    return Math.min(255, Math.max(1, pressure));
                })
            ),
            // Frame 2: Moderate Pressure, High Contact Area
            // Represents a wide, flat distribution
            Array(MATRIX_SIZE).fill(0).map((_, r) => 
                Array(MATRIX_SIZE).fill(0).map((_, c) => {
                    return Math.min(150, 70 + Math.floor(Math.random() * 50));
                })
            )
        ];

        const TOTAL_MATRICES = SENSOR_DATA_FRAMES.length; // Number of loaded frames

        // --- FIREBASE INITIALIZATION AND AUTHENTICATION ---
        async function initializeFirebase() {
            if (!firebaseConfig) {
                console.error("Firebase config is missing. Cannot initialize Firestore.");
                return;
            }
            try {
                const app = firebase.initializeApp(firebaseConfig);
                auth = firebase.getAuth(app);
                db = firebase.getFirestore(app);
                firebase.setLogLevel('Debug'); // Enable Firestore logging

                // 1. Initial Authentication
                if (initialAuthToken) {
                    await firebase.signInWithCustomToken(auth, initialAuthToken);
                } else {
                    await firebase.signInAnonymously(auth);
                }

                // 2. Auth State Listener
                firebase.onAuthStateChanged(auth, async (user) => {
                    if (user) {
                        currentUser = user;
                        // For this simulation, we check the locally stored role after a successful login attempt
                        if (currentView !== 'login') {
                            renderApp(); // Re-render if auth state changes outside login
                        }
                    } else {
                        currentUser = null;
                        userRole = null;
                        changeView('login');
                    }
                });

            } catch (error) {
                console.error("Firebase initialization or sign-in failed:", error);
                // Fallback to anonymous sign-in if custom token fails
                try {
                    auth = firebase.getAuth(firebase.initializeApp(firebaseConfig));
                    await firebase.signInAnonymously(auth);
                } catch (anonError) {
                    console.error("Anonymous sign-in failed:", anonError);
                }
            }
        }
        
        // --- VIEW RENDERING LOGIC ---
        function changeView(newView, role = null) {
            currentView = newView;
            userRole = role; // Set role upon successful login
            renderApp();
        }

        function renderApp() {
            const container = $('#app-container');
            container.empty();

            switch (currentView) {
                case 'login':
                    container.html(renderLoginPage());
                    // Force the body background to white for the login screen to hide any canvas defaults
                    $('body').removeClass('bg-gray-50').addClass('bg-white');
                    break;
                case 'dashboard':
                    container.html(renderDashboardPage());
                    dashboardSetup(); 
                    $('body').removeClass('bg-white').addClass('bg-gray-50');
                    break;
                case 'clinician':
                    container.html(renderClinicianDashboard());
                    $('body').removeClass('bg-white').addClass('bg-gray-50');
                    break;
                // Add case for 'admin' later
                default:
                    container.html(renderLoginPage());
            }
        }

        // --- MOCK AUTHENTICATION LOGIC (SIMULATING FLOWCHART) ---
        function handleLogin(username, password) {
            // This is a simple client-side check to simulate the user roles as per the case study/flowchart
            let role = null;
            
            // 1. Check User (Patient)
            if (username === 'patient') {
                role = 'patient';
                changeView('dashboard', role);
            } 
            // 2. Check Clinician
            else if (username === 'clinician') {
                role = 'clinician';
                changeView('clinician', role);
            } 
            // 3. Check Doctor/Admin
            else if (username === 'admin') {
                role = 'admin';
                // For now, admin also sees the clinician view for data access
                changeView('clinician', role); 
            } else {
                // Use a custom message box instead of alert()
                showModal("Login Failed", "Invalid Credentials. Please use 'patient', 'clinician', or 'admin' as the User ID to log in.");
            }
        }

        // --- CUSTOM MODAL FOR ALERTS (Replaces alert()) ---
        function showModal(title, message) {
            const modalHtml = `
                <div id="custom-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 transition-opacity duration-300">
                    <div class="bg-white p-6 rounded-xl shadow-2xl max-w-sm w-full transform transition-transform duration-300 scale-100">
                        <h3 class="text-xl font-bold text-red-600 mb-4">${title}</h3>
                        <p class="text-gray-700 mb-6">${message}</p>
                        <div class="flex justify-end">
                            <button onclick="$('#custom-modal').remove()" 
                                class="px-4 py-2 bg-indigo-600 text-white font-semibold rounded-lg hover:bg-indigo-700 transition">
                                OK
                            </button>
                        </div>
                    </div>
                </div>
            `;
            $('body').append(modalHtml);
        }

        // --- LOGIN PAGE RENDER (MATCHING SCREENSHOT DESIGN) ---
        function renderLoginPage() {
            // We use 'fixed inset-0' to make sure the login container absolutely covers the entire viewport 
            // and nothing from the canvas environment "bleeds" around it.
            return `
                <div class="fixed inset-0 bg-white flex w-full h-full">
                    <!-- Outer container mimicking the large application window -->
                    <div class="bg-white flex w-full h-full">
                        <!-- Left Panel (Login Form - Set to occupy the space seen in the screenshot, around 30-40% width) -->
                        <div class="w-full sm:w-2/5 lg:w-1/3 h-full px-12 py-10 flex flex-col justify-between">
                            <div>
                                <!-- Adjusting margin-top to match vertical placement in screenshot -->
                                <div class="mt-20"> 
                                    <h1 class="text-4xl font-bold text-gray-800 mb-1">Log in to</h1>
                                    <h1 class="text-4xl font-bold text-gray-800 mb-10">Graphene Trace Portal</h1>
                                </div>
                                
                                <p class="text-gray-500 mb-4 font-semibold text-sm tracking-widest">Credentials</p>
                                
                                <form id="login-form" class="space-y-6">
                                    <div class="space-y-2">
                                        <label for="user_id" class="block text-xs font-medium text-gray-600">User ID</label>
                                        <input type="text" id="user_id" name="user_id" required 
                                            class="w-full px-3 py-3 border border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500 transition duration-150 text-base shadow-sm">
                                    </div>
                                    <div class="space-y-2">
                                        <label for="password" class="block text-xs font-medium text-gray-600">Password</label>
                                        <input type="password" id="password" name="password" required 
                                            class="w-full px-3 py-3 border border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500 transition duration-150 text-base shadow-sm">
                                    </div>
                                    
                                    <!-- Button and Forgot Password alignment -->
                                    <div class="pt-6 space-y-2 flex flex-col items-start">
                                        <button type="submit" 
                                            class="w-32 py-2 bg-indigo-600 text-white font-semibold rounded-lg shadow-md hover:bg-indigo-700 transition duration-200 text-base">
                                            Login
                                        </button>
                                        <a href="#" class="text-sm text-indigo-600 hover:text-indigo-800 transition duration-150 mt-4">Forgot Password?</a>
                                    </div>
                                </form>
                            </div>
                            <!-- Empty div to occupy bottom space and push content up -->
                            <div></div> 
                        </div>

                        <!-- Right Panel (Large Empty White Area - fills the rest of the screen, providing the asymmetric look) -->
                        <div class="flex-grow bg-white border-l border-gray-100">
                            <!-- This area is kept empty to match the screenshot -->
                            <!-- We can add a subtle footer here to mimic the screenshot, which shows a copyright in the bottom right -->
                            <div class="absolute bottom-4 right-6 text-xs text-gray-400">
                                &copy; 2025 - sample - Privacy
                            </div>
                        </div>
                    </div>
                </div>
            `;
        }

        // --- DASHBOARD PAGE RENDER (PATIENT VIEW) ---
        function renderDashboardPage() {
            // This is the original index.html content, adapted for the structure
            return `
                <div class="flex flex-col h-screen">
                    <!-- Navigation Bar -->
                    <nav class="bg-indigo-700 text-white p-4 shadow-lg flex justify-between items-center">
                        <span class="text-lg font-bold">Graphene Trace (Patient View)</span>
                        <div class="flex space-x-4 items-center">
                            <span class="text-sm">User ID: ${currentUser ? currentUser.uid.substring(0, 8) : 'N/A'}...</span>
                            <button onclick="changeView('login')" class="px-4 py-1 bg-red-500 hover:bg-red-600 rounded-full text-sm transition">Log Out</button>
                        </div>
                    </nav>

                    <!-- Main Content -->
                    <div class="flex-grow p-6 overflow-y-auto bg-gray-50">
                        <div class="max-w-4xl mx-auto bg-white shadow-xl rounded-2xl p-8">
                            <h1 class="text-3xl font-extrabold text-indigo-700 mb-6">Sensore Pressure Map Viewer</h1>

                            <!-- Title and Range Slider based on Index.cshtml -->
                            <div class="bg-indigo-50 p-4 rounded-lg border border-indigo-200 mb-8">
                                <h2 class="text-xl font-semibold mb-2">
                                    Matrix <span id="matrix-number" class="text-indigo-900">1</span> / <span id="total-matrices">${TOTAL_MATRICES}</span>
                                </h2>
                                <label for="matrixRange" class="block text-sm font-medium text-gray-700 mb-2">Select Matrix (Time Step):</label>
                                <input type="range" id="matrixRange" min="0" max="${TOTAL_MATRICES - 1}" value="0" class="w-full h-2 bg-indigo-200 rounded-lg appearance-none cursor-pointer">
                            </div>

                            <!-- Dashboard Layout -->
                            <div class="grid md:grid-cols-3 gap-6">
                                <!-- Heatmap Visualization (Spans 2/3 width) -->
                                <div class="md:col-span-2 bg-gray-100 p-4 rounded-xl shadow-inner">
                                    <h3 class="text-lg font-bold mb-3 text-center">Pressure Distribution Heatmap (32x32)</h3>
                                    <div id="heatmap-container" class="flex justify-center items-center">
                                        <!-- Initial Heatmap goes here -->
                                    </div>
                                    <div class="mt-4 flex justify-between text-sm font-semibold">
                                        <span class="text-blue-600">Low Pressure (1)</span>
                                        <span class="text-red-600">High Pressure (255)</span>
                                    </div>
                                </div>

                                <!-- Key Metrics and Info (1/3 width) -->
                                <div class="md:col-span-1 space-y-4">
                                    <div class="bg-green-100 p-4 rounded-xl shadow-md border-b-4 border-green-500">
                                        <p class="text-sm font-medium text-green-700">Peak Pressure Index</p>
                                        <p id="metric-peak-pressure" class="text-2xl font-bold text-green-900">--- mmHg</p>
                                    </div>
                                    <div class="bg-yellow-100 p-4 rounded-xl shadow-md border-b-4 border-yellow-500">
                                        <p class="text-sm font-medium text-yellow-700">Contact Area %</p>
                                        <p id="metric-contact-area" class="text-2xl font-bold text-yellow-900">--- %</p>
                                    </div>
                                    <div id="alert-box" class="hidden bg-red-100 p-4 rounded-xl shadow-md border-b-4 border-red-600">
                                        <p class="text-sm font-medium text-red-700">SYSTEM ALERT</p>
                                        <p class="text-lg font-bold text-red-900">High pressure detected! Review needed.</p>
                                    </div>
                                    
                                    <!-- User Feedback/Comments Section -->
                                    <div class="p-4 bg-gray-100 rounded-xl shadow-inner">
                                        <h4 class="font-semibold mb-2">Your Feedback</h4>
                                        <textarea id="user-comment" class="w-full p-2 border rounded-lg resize-none text-sm" rows="3" placeholder="Log any discomfort or notes for this timestamp..."></textarea>
                                        <button class="w-full py-2 mt-2 bg-indigo-500 text-white rounded-lg hover:bg-indigo-600 transition">Submit Comment</button>
                                    </div>

                                </div>
                            </div>

                            <p class="text-center text-gray-400 text-xs mt-8">&copy; 2025 Graphene Trace</p>
                        </div>
                    </div>
                </div>
            `;
        }

        // --- CLINICIAN/ADMIN PAGE RENDER ---
        function renderClinicianDashboard() {
            return `
                <div class="flex flex-col h-screen">
                    <!-- Navigation Bar -->
                    <nav class="bg-gray-800 text-white p-4 shadow-lg flex justify-between items-center">
                        <span class="text-lg font-bold">Graphene Trace (${userRole === 'admin' ? 'Admin' : 'Clinician'} View)</span>
                        <div class="flex space-x-4 items-center">
                            <button onclick="changeView('login')" class="px-4 py-1 bg-red-500 hover:bg-red-600 rounded-full text-sm transition">Log Out</button>
                        </div>
                    </nav>

                    <!-- Main Content -->
                    <div class="flex-grow p-6 overflow-y-auto bg-gray-50">
                        <div class="max-w-6xl mx-auto bg-white shadow-xl rounded-2xl p-8">
                            <h1 class="text-3xl font-extrabold text-gray-800 mb-6">Patient Data Review Portal</h1>
                            
                            <!-- Search Bar (Step 2 in Flowchart) -->
                            <div class="mb-8 p-4 bg-blue-100 rounded-lg flex space-x-3">
                                <input type="text" id="patient-search" placeholder="Search for Patient ID or Name..." 
                                    class="flex-grow px-4 py-2 border border-blue-300 rounded-lg focus:ring-blue-500 focus:border-blue-500">
                                <button class="px-6 py-2 bg-blue-600 text-white font-semibold rounded-lg hover:bg-blue-700 transition">Search</button>
                            </div>

                            <div class="text-center p-10 bg-gray-50 rounded-lg">
                                <p class="text-lg text-gray-500">Select a patient above to view their heatmap history, key metrics, and review flagged alerts and comments.</p>
                                <p class="mt-2 text-sm text-gray-400">This view supports the flowchart step: "Show a data explained in a different page."</p>
                            </div>
                        </div>
                    </div>
                </div>
            `;
        }

        // --- DASHBOARD SCRIPT (DATA ANALYSIS & VISUALIZATION) ---

        // Function to map a pressure value (1-255) to a Tailwind color class
        function getColor(value) {
            // Pressure values 1-255 (1 is default zero-force)
            if (value >= 200) return 'bg-red-700';
            if (value >= 150) return 'bg-red-500';
            if (value >= 100) return 'bg-yellow-500';
            if (value >= 50) return 'bg-green-500';
            if (value > 1) return 'bg-blue-500';
            return 'bg-blue-900'; // Base value (1)
        }

        // Core function to pull and analyze a frame
        function fetchAndAnalyzeData(index) {
            // 1. Pull data from the simulated CSV/Array (SENSOR_DATA_FRAMES)
            const data = SENSOR_DATA_FRAMES[index]; 
            
            if (!data) {
                console.error(`Matrix data for index ${index} not found.`);
                return null;
            }

            // 2. Metric Calculation (Based on Case Study Requirements)
            const PIXEL_COUNT = MATRIX_SIZE * MATRIX_SIZE;
            const MIN_PRESSURE_THRESHOLD = 50; // Threshold for Contact Area %
            
            let totalContactPixels = 0;
            let maxPressure = 0;

            // Simple Peak Pressure Check (simplified, without the 10-pixel area exclusion)
            // In a real C# backend, you would implement flood-fill/clustering to check for contiguous 10px areas.
            for (let r = 0; r < MATRIX_SIZE; r++) {
                for (let c = 0; c < MATRIX_SIZE; c++) {
                    const value = data[r][c];
                    
                    if (value > maxPressure) {
                        maxPressure = value;
                    }
                    
                    if (value >= MIN_PRESSURE_THRESHOLD) { 
                        totalContactPixels++;
                    }
                }
            }
            
            const peakPressureIndex = maxPressure; 
            const contactAreaPercent = Math.round((totalContactPixels / PIXEL_COUNT) * 100);
            
            // 3. Smart Alert Check (Case Study: Alert if high pressure is identified)
            const ALERT_PRESSURE_THRESHOLD = 200;
            const isAlert = peakPressureIndex >= ALERT_PRESSURE_THRESHOLD;

            // 4. Generate HTML (The _HeatmapPartial equivalent)
            let html = '<table class="heatmap-table">';
            data.forEach(row => {
                html += '<tr>';
                row.forEach(cellValue => {
                    const colorClass = getColor(cellValue);
                    html += `<td class="${colorClass}" title="${cellValue}"></td>`;
                });
                html += '</tr>';
            });
            html += '</table>';

            return {
                html: html,
                peakPressure: peakPressureIndex,
                contactArea: contactAreaPercent,
                alert: isAlert,
            };
        }

        // The primary client-side rendering function
        function updateDashboard(index) {
            const result = fetchAndAnalyzeData(index); 

            if (result) {
                $("#heatmap-container").html(result.html);
                $("#metric-peak-pressure").text(`${result.peakPressure} mmHg`);
                $("#metric-contact-area").text(`${result.contactArea} %`);

                if (result.alert) {
                    $("#alert-box").slideDown(200);
                } else {
                    $("#alert-box").slideUp(200);
                }
            }
        }

        // Setup function for the dashboard view
        function dashboardSetup() {
            // Initialize total matrix count display
            $("#total-matrices").text(TOTAL_MATRICES);
            $("#matrixRange").attr('max', TOTAL_MATRICES - 1);
            
            // Initial load
            updateDashboard($("#matrixRange").val());
            
            // Event listener: mirrors the logic in your original Index.cshtml
            $("#matrixRange").on("input", function(){
                var index = parseInt($(this).val());

                // 1. Update the displayed number immediately
                $("#matrix-number").text(index + 1);

                // 2. Simulation call
                updateDashboard(index);
            });
        }


        // --- DOCUMENT READY & INITIALIZATION ---
        $(document).ready(function(){
            // Set up event listener for the login form submission
            $(document).on('submit', '#login-form', function(e) {
                e.preventDefault();
                const username = $('#user_id').val().toLowerCase();
                const password = $('#password').val(); // Password is not used in this mock, but kept for form integrity
                handleLogin(username, password);
            });

            // Start Firebase initialization and initial rendering
            initializeFirebase().then(() => {
                // Determine initial view based on if we are authenticated (though anonymous sign-in is used)
                // For this scenario, we always start at the login page to choose the role.
                changeView('login');
            });
        });
    </script>
</body>
</html>
